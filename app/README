README for Backend (backend/README.md)

# Geo Search App - Backend  

## Overview  
This is the backend service for the **Geo Search App**, built using **Flask** and **MongoDB**. It provides a RESTful API for **place searches, user authentication, and search history management**.  

## Features  
- **User Authentication:** Secure registration, login, and session management using JWT.  
- **Place Search:** Fetches data from **Google Places API** and returns relevant places based on user queries.  
- **Favorites & Search History:** Users can save places and view past searches.  
- **MongoDB as Database:** Stores user data, search history, and place details.  

## Folder Structure and File Explanations  
```bash
/backend
â”‚â”€â”€ /app                   # Core backend logic
â”‚   â”œâ”€â”€ /controllers       # Manages API endpoints and request handling
â”‚   â”‚   â”œâ”€â”€ auth_controller.py    # Handles user authentication requests
â”‚   â”‚   â”œâ”€â”€ places_controller.py  # Manages place search operations
â”‚   â”‚   â”œâ”€â”€ users_controller.py   # Handles user profile operations
â”‚   â”‚   â”œâ”€â”€ searches_controller.py # Manages user search history
â”‚   â”‚   â”œâ”€â”€ __init__.py            # Initializes the controllers module
â”‚   â”‚
â”‚   â”œâ”€â”€ /models            # Database schemas (MongoDB)
â”‚   â”‚   â”œâ”€â”€ user_model.py   # Defines user structure in MongoDB
â”‚   â”‚   â”œâ”€â”€ place_model.py  # Defines place structure in MongoDB
â”‚   â”‚   â”œâ”€â”€ search_model.py # Defines search history structure in MongoDB
â”‚   â”‚   â”œâ”€â”€ __init__.py     # Initializes the models module
â”‚   â”‚
â”‚   â”œâ”€â”€ /services          # Business logic and external API integrations
â”‚   â”‚   â”œâ”€â”€ google_places_service.py # Interacts with Google Places API
â”‚   â”‚   â”œâ”€â”€ auth_service.py          # Manages authentication logic
â”‚   â”‚   â”œâ”€â”€ __init__.py               # Initializes the services module
â”‚   â”‚
â”‚   â”œâ”€â”€ /routes            # Flask routes for defining API endpoints
â”‚   â”‚   â”œâ”€â”€ auth_routes.py  # Defines authentication-related routes
â”‚   â”‚   â”œâ”€â”€ places_routes.py # Defines place search-related routes
â”‚   â”‚   â”œâ”€â”€ users_routes.py  # Defines user-related routes
â”‚   â”‚   â”œâ”€â”€ searches_routes.py # Defines search history routes
â”‚   â”‚   â”œâ”€â”€ __init__.py      # Initializes the routes module
â”‚   â”‚
â”‚   â”œâ”€â”€ /utils             # Utility functions (logging, authentication, etc.)
â”‚   â”‚   â”œâ”€â”€ jwt_handler.py  # Manages JWT token encoding/decoding
â”‚   â”‚   â”œâ”€â”€ config.py       # Handles configuration settings
â”‚   â”‚   â”œâ”€â”€ __init__.py     # Initializes the utils module
â”‚   â”‚
â”‚   â”œâ”€â”€ __init__.py        # Initializes the backend module
â”‚
â”‚â”€â”€ /database              # Database connection and setup
â”‚   â”œâ”€â”€ db_connection.py   # Establishes connection with MongoDB
â”‚   â”œâ”€â”€ db_setup.py        # Initializes database collections
â”‚   â”œâ”€â”€ __init__.py        # Initializes the database module
â”‚
â”‚â”€â”€ /tests                 # Unit and integration tests
â”‚   â”œâ”€â”€ test_auth.py       # Tests authentication endpoints
â”‚   â”œâ”€â”€ test_places.py     # Tests place search endpoints
â”‚   â”œâ”€â”€ test_users.py      # Tests user-related endpoints
â”‚   â”œâ”€â”€ __init__.py        # Initializes the tests module
â”‚
â”‚â”€â”€ /config                # Environment-based configurations
â”‚   â”œâ”€â”€ config_dev.py      # Development environment settings
â”‚   â”œâ”€â”€ config_prod.py     # Production environment settings
â”‚   â”œâ”€â”€ __init__.py        # Initializes the config module
â”‚
â”‚â”€â”€ .env                   # Environment variables (API keys, database connection)
â”‚â”€â”€ .gitignore             # Ignores unnecessary files in Git
â”‚â”€â”€ requirements.txt       # List of required Python dependencies
â”‚â”€â”€ run.py                 # Main Flask application entry point
â”‚â”€â”€ wsgi.py                # WSGI configuration for production
â”‚â”€â”€ README.md              # Backend documentation

Installation
	1.	Install dependencies:

pip install -r requirements.txt


	2.	Set up the environment variables (.env).
	3.	Start the Flask server:

python run.py



API Endpoints
	â€¢	POST /api/auth/register - User registration
	â€¢	POST /api/auth/login - User login
	â€¢	GET /api/places/search - Search for places
	â€¢	GET /api/user/profile - Get user profile
	â€¢	POST /api/user/favorites - Save a place to favorites

Environment Variables

The backend requires an .env file for API keys and database configuration.
Example .env file:

MONGO_URI=mongodb+srv://your_mongo_connection_string
SECRET_KEY=your_secret_key
GOOGLE_API_KEY=your_google_places_api_key

Deployment

For production deployment:
	1.	Configure wsgi.py for WSGI-based server hosting.
	2.	Use Gunicorn for running Flask in production:

gunicorn -w 4 wsgi:app


	3.	Deploy the frontend separately on Netlify, Vercel, or any static hosting provider.

This README provides a clear breakdown of the backendâ€™s folder structure, required files, and setup instructions to help any developer quickly understand and start working on the project. ðŸš€